{"repository_name":"spider-gazelle","body":"# Spider-Gazelle To-do-list API\n\n## Documentation\n\nROUTES:\n\n- GET **/tasks** to view all tasks\n- GET **/tasks/:id** to view one task\n- POST **/tasks** to add a new task\n- PATCH **/tasks/:id** to update a task\n- DELETE **/tasks/:id** to delete a task\n\n## Running app\n\n- Run `crystal /src/app.cr` to run in development mode\n\n## Testing\n\n- Run `crystal spec`\n- to run in development mode `crystal ./src/app.cr`\n\n## Compiling\n\n`crystal build ./src/app.cr`\n\n### Deploying\n\nOnce compiled you are left with a binary `./app`\n\n- for help `./app --help`\n- viewing routes `./app --routes`\n- run on a different port or host `./app -b 0.0.0.0 -p 80`\n","program":{"html_id":"spider-gazelle/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"spider-gazelle","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"spider-gazelle/App","path":"App.html","kind":"module","full_name":"App","name":"App","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"COOKIE_SESSION_KEY","name":"COOKIE_SESSION_KEY","value":"ENV[\"COOKIE_SESSION_KEY\"]? || \"_spider_gazelle_\"","doc":null,"summary":null},{"id":"COOKIE_SESSION_SECRET","name":"COOKIE_SESSION_SECRET","value":"ENV[\"COOKIE_SESSION_SECRET\"]? || \"4f74c0b358d5bab4000dd3c75465dc2c\"","doc":null,"summary":null},{"id":"DEFAULT_HOST","name":"DEFAULT_HOST","value":"ENV[\"SG_SERVER_HOST\"]? || \"127.0.0.1\"","doc":null,"summary":null},{"id":"DEFAULT_PORT","name":"DEFAULT_PORT","value":"(ENV[\"SG_SERVER_PORT\"]? || 3000).to_i","doc":null,"summary":null},{"id":"DEFAULT_PROCESS_COUNT","name":"DEFAULT_PROCESS_COUNT","value":"(ENV[\"SG_PROCESS_COUNT\"]? || 1).to_i","doc":null,"summary":null},{"id":"ENVIRONMENT","name":"ENVIRONMENT","value":"ENV[\"SG_ENV\"]? || \"development\"","doc":null,"summary":null},{"id":"Log","name":"Log","value":"::Log.for(NAME)","doc":null,"summary":null},{"id":"LOG_BACKEND","name":"LOG_BACKEND","value":"ActionController.default_backend","doc":null,"summary":null},{"id":"NAME","name":"NAME","value":"\"Spider-Gazelle\"","doc":null,"summary":null},{"id":"POSTGRES_URL","name":"POSTGRES_URL","value":"ENV[\"POSTGRES_URL\"]? || \"postgres://julie@localhost:5432/tododatabase\"","doc":null,"summary":null},{"id":"STATIC_FILE_PATH","name":"STATIC_FILE_PATH","value":"ENV[\"PUBLIC_WWW_PATH\"]? || \"./www\"","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/Users/julie/Documents/Internship/PlaceOS/todo-list/src\\\"`).chomp.stringify.downcase }}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"running_in_production?-class-method","html_id":"running_in_production?-class-method","name":"running_in_production?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/constants.cr","line_number":24,"url":null},"def":{"name":"running_in_production?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ENVIRONMENT == \"production\""}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"spider-gazelle/Application","path":"Application.html","kind":"class","full_name":"Application","name":"Application","abstract":true,"superclass":{"html_id":"spider-gazelle/ActionController/Base","kind":"class","full_name":"ActionController::Base","name":"Base"},"ancestors":[{"html_id":"spider-gazelle/ActionController/Base","kind":"class","full_name":"ActionController::Base","name":"Base"},{"html_id":"spider-gazelle/ActionController/Responders","kind":"module","full_name":"ActionController::Responders","name":"Responders"},{"html_id":"spider-gazelle/ActionController/Context","kind":"module","full_name":"ActionController::Context","name":"Context"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"AFTER","name":"AFTER","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"AROUND","name":"AROUND","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"BEFORE","name":"BEFORE","value":"{set_request_id => {nil, nil}, set_date_header => {nil, nil}} of Nil => Nil","doc":null,"summary":null},{"id":"FORCE","name":"FORCE","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"LOCAL_AFTER","name":"LOCAL_AFTER","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_AROUND","name":"LOCAL_AROUND","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_BEFORE","name":"LOCAL_BEFORE","value":"{set_request_id => {nil, nil}, set_date_header => {nil, nil}} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_FORCE","name":"LOCAL_FORCE","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_RESCUE","name":"LOCAL_RESCUE","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_ROUTES","name":"LOCAL_ROUTES","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_SKIP","name":"LOCAL_SKIP","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"Log","name":"Log","value":"::App::Log.for(\"controller\")","doc":"Configure your log source name\nNOTE:: this is chaining from App::Log","summary":"<p>Configure your log source name NOTE:: this is chaining from App::Log</p>"},{"id":"NAMESPACE","name":"NAMESPACE","value":"[\"/application\"]","doc":"default namespace based on class","summary":"<p>default namespace based on class</p>"},{"id":"RESCUE","name":"RESCUE","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"ROUTES","name":"ROUTES","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"SKIP","name":"SKIP","value":"{} of Nil => Nil","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"spider-gazelle/TasksController","kind":"class","full_name":"TasksController","name":"TasksController"}],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"context(method:String,route:String,route_params:Hash(String,String)?=nil,headers:Hash(String,String)?=nil,body:String|Bytes|IO|Nil=nil,&)-class-method","html_id":"context(method:String,route:String,route_params:Hash(String,String)?=nil,headers:Hash(String,String)?=nil,body:String|Bytes|IO|Nil=nil,&)-class-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"String"},{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":"String"},{"name":"route_params","doc":null,"default_value":"nil","external_name":"route_params","restriction":"Hash(String, String) | ::Nil"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, String) | ::Nil"},{"name":"body","doc":null,"default_value":"nil","external_name":"body","restriction":"String | Bytes | IO | Nil"}],"args_string":"(method : String, route : String, route_params : Hash(String, String)? = <span class=\"n\">nil</span>, headers : Hash(String, String)? = <span class=\"n\">nil</span>, body : String | Bytes | IO | Nil = <span class=\"n\">nil</span>, &)","args_html":"(method : String, route : String, route_params : Hash(String, String)? = <span class=\"n\">nil</span>, headers : Hash(String, String)? = <span class=\"n\">nil</span>, body : String | Bytes | IO | Nil = <span class=\"n\">nil</span>, &)","location":{"filename":"src/controllers/application.cr","line_number":3,"url":null},"def":{"name":"context","args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"String"},{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":"String"},{"name":"route_params","doc":null,"default_value":"nil","external_name":"route_params","restriction":"Hash(String, String) | ::Nil"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, String) | ::Nil"},{"name":"body","doc":null,"default_value":"nil","external_name":"body","restriction":"String | Bytes | IO | Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"ctx = instantiate_context(method, route, route_params, headers, body)\ninstance = self.new(ctx)\nyield instance\nctx.response.output.rewind\nctx.response\n"}}],"constructors":[],"instance_methods":[{"id":"set_date_header-instance-method","html_id":"set_date_header-instance-method","name":"set_date_header","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/application.cr","line_number":27,"url":null},"def":{"name":"set_date_header","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"response.headers[\"Date\"] = HTTP.format_time(Time.utc)"}},{"id":"set_request_id-instance-method","html_id":"set_request_id-instance-method","name":"set_request_id","doc":"This makes it simple to match client requests with server side logs.\nWhen building microservices this ID should be propagated to upstream services.","summary":"<p>This makes it simple to match client requests with server side logs.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/application.cr","line_number":13,"url":null},"def":{"name":"set_request_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"request_id = UUID.random.to_s\nLog.context.set(client_ip: client_ip, request_id: request_id)\nresponse.headers[\"X-Request-ID\"] = request_id\n"}}],"macros":[{"id":"__inherit_after_filters__-macro","html_id":"__inherit_after_filters__-macro","name":"__inherit_after_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_after_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% AFTER_MAPPINGS[@type.name.id] = LOCAL_AFTER %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = AFTER_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !AFTER[name] %}\n                {% AFTER[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_around_filters__-macro","html_id":"__inherit_around_filters__-macro","name":"__inherit_around_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_around_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% AROUND_MAPPINGS[@type.name.id] = LOCAL_AROUND %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = AROUND_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !AROUND[name] %}\n                {% AROUND[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_before_filters__-macro","html_id":"__inherit_before_filters__-macro","name":"__inherit_before_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_before_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% BEFORE_MAPPINGS[@type.name.id] = LOCAL_BEFORE %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = BEFORE_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !BEFORE[name] %}\n                {% BEFORE[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_force_filters__-macro","html_id":"__inherit_force_filters__-macro","name":"__inherit_force_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_force_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% FORCE_MAPPINGS[@type.name.id] = LOCAL_FORCE %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = FORCE_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !FORCE[name] %}\n                {% FORCE[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_rescue_filters__-macro","html_id":"__inherit_rescue_filters__-macro","name":"__inherit_rescue_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_rescue_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% RESCUE_MAPPINGS[@type.name.id] = LOCAL_RESCUE %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = RESCUE_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !RESCUE[name] %}\n                {% RESCUE[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_routes_filters__-macro","html_id":"__inherit_routes_filters__-macro","name":"__inherit_routes_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_routes_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% ROUTES_MAPPINGS[@type.name.id] = LOCAL_ROUTES %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = ROUTES_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !ROUTES[name] %}\n                {% ROUTES[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_skip_filters__-macro","html_id":"__inherit_skip_filters__-macro","name":"__inherit_skip_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_skip_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% SKIP_MAPPINGS[@type.name.id] = LOCAL_SKIP %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = SKIP_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !SKIP[name] %}\n                {% SKIP[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}}],"types":[]},{"html_id":"spider-gazelle/CreateTable1","path":"CreateTable1.html","kind":"class","full_name":"CreateTable1","name":"CreateTable1","abstract":false,"superclass":{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"spider-gazelle/Clear/ErrorMessages","kind":"module","full_name":"Clear::ErrorMessages","name":"ErrorMessages"},{"html_id":"spider-gazelle/Clear/Migration","kind":"module","full_name":"Clear::Migration","name":"Migration"},{"html_id":"spider-gazelle/Clear/Migration/Helper","kind":"module","full_name":"Clear::Migration::Helper","name":"Helper"},{"html_id":"spider-gazelle/Clear/Migration/FullTextSearchableHelpers","kind":"module","full_name":"Clear::Migration::FullTextSearchableHelpers","name":"FullTextSearchableHelpers"},{"html_id":"spider-gazelle/Clear/ErrorMessages","kind":"module","full_name":"Clear::ErrorMessages","name":"ErrorMessages"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"spider-gazelle/Clear/ErrorMessages","kind":"module","full_name":"Clear::ErrorMessages","name":"ErrorMessages"},{"html_id":"spider-gazelle/Clear/Migration","kind":"module","full_name":"Clear::Migration","name":"Migration"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"change(direction)-instance-method","html_id":"change(direction)-instance-method","name":"change","doc":null,"summary":null,"abstract":false,"args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""}],"args_string":"(direction)","args_html":"(direction)","location":{"filename":"src/db/migrate/1_migration.cr","line_number":11,"url":null},"def":{"name":"change","args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"direction.up do\n  execute(\"CREATE TABLE tasks(id serial primary key not null, name text not null, description text not null, done boolean)\")\nend\ndirection.down do\n  execute(\"DROP TABLE tasks\")\nend\n"}},{"id":"uid:Int64-instance-method","html_id":"uid:Int64-instance-method","name":"uid","doc":"\nReturn the migration number (Unique ID or UID) for migration sorting.\n\nDefault behavior (By order of priority):\n\n- The uid will be generated by the class name, if the class name contains number at the end.\n- If there's no numbers in the migration class, then it will try to use the id in the filename\n- If not found, an exception is raised. This method can be overwritten by the concrete migration in case you need it.\n\nExample:\n\n`class MyMigration1234567 # << Order = 1234567`\n`file db/1234567_my_migration.cr # << Order = 1234567`\n\n","summary":"<p>Return the migration number (Unique ID or UID) for migration sorting.</p>","abstract":false,"args":[],"args_string":" : Int64","args_html":" : Int64","location":{"filename":"src/db/migrate/1_migration.cr","line_number":4,"url":null},"def":{"name":"uid","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"Int64.new(begin\n  filename = File.basename(\"/Users/julie/Documents/Internship/PlaceOS/todo-list/src/db/migrate/1_migration.cr\")\n  if self.class.name =~ (/[0-9]+$/)\n    self.class.name[/[0-9]+$/]\n  else\n    if filename =~ (/^[0-9]+/)\n      filename[/^[0-9]+/]\n    else\n      raise(uid_not_found(self.class.name))\n    end\n  end\nend)"}}],"macros":[],"types":[{"html_id":"spider-gazelle/CreateTable1/IrreversibleMigration","path":"CreateTable1/IrreversibleMigration.html","kind":"class","full_name":"CreateTable1::IrreversibleMigration","name":"IrreversibleMigration","abstract":false,"superclass":{"html_id":"spider-gazelle/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"spider-gazelle/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"spider-gazelle/CreateTable1","kind":"class","full_name":"CreateTable1","name":"CreateTable1"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"spider-gazelle/Task","path":"Task.html","kind":"class","full_name":"Task","name":"Task","abstract":false,"superclass":{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"spider-gazelle/Clear/Model/Relations/HasManyThroughMacro","kind":"module","full_name":"Clear::Model::Relations::HasManyThroughMacro","name":"HasManyThroughMacro"},{"html_id":"spider-gazelle/Clear/Model/Relations/HasManyMacro","kind":"module","full_name":"Clear::Model::Relations::HasManyMacro","name":"HasManyMacro"},{"html_id":"spider-gazelle/Clear/Model/Relations/HasOneMacro","kind":"module","full_name":"Clear::Model::Relations::HasOneMacro","name":"HasOneMacro"},{"html_id":"spider-gazelle/Clear/Model/Relations/BelongsToMacro","kind":"module","full_name":"Clear::Model::Relations::BelongsToMacro","name":"BelongsToMacro"},{"html_id":"spider-gazelle/Clear/Model","kind":"module","full_name":"Clear::Model","name":"Model"},{"html_id":"spider-gazelle/Clear/Model/FullTextSearchable","kind":"module","full_name":"Clear::Model::FullTextSearchable","name":"FullTextSearchable"},{"html_id":"spider-gazelle/Clear/Model/JSONDeserialize","kind":"module","full_name":"Clear::Model::JSONDeserialize","name":"JSONDeserialize"},{"html_id":"spider-gazelle/Clear/Model/Initializer","kind":"module","full_name":"Clear::Model::Initializer","name":"Initializer"},{"html_id":"spider-gazelle/Clear/Model/HasFactory","kind":"module","full_name":"Clear::Model::HasFactory","name":"HasFactory"},{"html_id":"spider-gazelle/Clear/Model/ClassMethods","kind":"module","full_name":"Clear::Model::ClassMethods","name":"ClassMethods"},{"html_id":"spider-gazelle/Clear/Model/HasScope","kind":"module","full_name":"Clear::Model::HasScope","name":"HasScope"},{"html_id":"spider-gazelle/Clear/Model/HasRelations","kind":"module","full_name":"Clear::Model::HasRelations","name":"HasRelations"},{"html_id":"spider-gazelle/Clear/Model/HasValidation","kind":"module","full_name":"Clear::Model::HasValidation","name":"HasValidation"},{"html_id":"spider-gazelle/Clear/Validation/Helper","kind":"module","full_name":"Clear::Validation::Helper","name":"Helper"},{"html_id":"spider-gazelle/Clear/Model/HasSaving","kind":"module","full_name":"Clear::Model::HasSaving","name":"HasSaving"},{"html_id":"spider-gazelle/Clear/Model/HasSerialPkey","kind":"module","full_name":"Clear::Model::HasSerialPkey","name":"HasSerialPkey"},{"html_id":"spider-gazelle/Clear/Model/HasTimestamps","kind":"module","full_name":"Clear::Model::HasTimestamps","name":"HasTimestamps"},{"html_id":"spider-gazelle/Clear/Model/HasColumns","kind":"module","full_name":"Clear::Model::HasColumns","name":"HasColumns"},{"html_id":"spider-gazelle/Clear/Model/HasHooks","kind":"module","full_name":"Clear::Model::HasHooks","name":"HasHooks"},{"html_id":"spider-gazelle/Clear/Model/Connection","kind":"module","full_name":"Clear::Model::Connection","name":"Connection"},{"html_id":"spider-gazelle/Clear/ErrorMessages","kind":"module","full_name":"Clear::ErrorMessages","name":"ErrorMessages"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"COLUMNS","name":"COLUMNS","value":"{\"name\" => {type: String, primary: false, converter: \"String\", db_column_name: \"name\", crystal_variable_name: name, presence: true, mass_assign: true}, \"description\" => {type: String, primary: false, converter: \"String\", db_column_name: \"description\", crystal_variable_name: description, presence: true, mass_assign: true}, \"done\" => {type: Bool, primary: false, converter: \"Bool\", db_column_name: \"done\", crystal_variable_name: done, presence: true, mass_assign: true}, \"id\" => {type: Int32, primary: true, converter: \"Int32\", db_column_name: \"id\", crystal_variable_name: id, presence: false, mass_assign: true}} of Nil => Nil","doc":null,"summary":null},{"id":"POLYMORPHISM_SETTINGS","name":"POLYMORPHISM_SETTINGS","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"RELATION_FILTERS","name":"RELATION_FILTERS","value":"{} of String => (Clear::SQL::SelectBuilder -> )","doc":null,"summary":null}],"included_modules":[{"html_id":"spider-gazelle/Clear/Model","kind":"module","full_name":"Clear::Model","name":"Model"},{"html_id":"spider-gazelle/Clear/Model/Relations/BelongsToMacro","kind":"module","full_name":"Clear::Model::Relations::BelongsToMacro","name":"BelongsToMacro"},{"html_id":"spider-gazelle/Clear/Model/Relations/HasManyMacro","kind":"module","full_name":"Clear::Model::Relations::HasManyMacro","name":"HasManyMacro"},{"html_id":"spider-gazelle/Clear/Model/Relations/HasManyThroughMacro","kind":"module","full_name":"Clear::Model::Relations::HasManyThroughMacro","name":"HasManyThroughMacro"},{"html_id":"spider-gazelle/Clear/Model/Relations/HasOneMacro","kind":"module","full_name":"Clear::Model::Relations::HasOneMacro","name":"HasOneMacro"}],"extended_modules":[{"html_id":"spider-gazelle/Clear/Model/HasHooks/ClassMethods","kind":"module","full_name":"Clear::Model::HasHooks::ClassMethods","name":"ClassMethods"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"__call_relation_filter__(name:String,query:Clear::SQL::SelectBuilder)-class-method","html_id":"__call_relation_filter__(name:String,query:Clear::SQL::SelectBuilder)-class-method","name":"__call_relation_filter__","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Clear::SQL::SelectBuilder"}],"args_string":"(name : String, query : Clear::SQL::SelectBuilder)","args_html":"(name : String, query : Clear::SQL::SelectBuilder)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"__call_relation_filter__","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Clear::SQL::SelectBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cb = RELATION_FILTERS[name]?\nif !cb\n  raise(\"Cannot find relation #{name} of #{self.name}. Candidates are: #{RELATION_FILTERS.keys.join(\"\\n\")}\")\nend\ncb.call(query)\n"}},{"id":"build(**x:**T)forallT-class-method","html_id":"build(**x:**T)forallT-class-method","name":"build","doc":"Build a new empty model and fill the columns using the NamedTuple in argument.\n\nReturns the new model","summary":"<p>Build a new empty model and fill the columns using the NamedTuple in argument.</p>","abstract":false,"args":[],"args_string":"(**x : **T) forall T","args_html":"(**x : **T) forall T","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"build","args":[],"double_splat":{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if T.size > 0 %}\n          self.new(x)\n        {% else %}\n          self.new\n        {% end %}"}},{"id":"columns-class-method","html_id":"columns-class-method","name":"columns","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"columns","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@columns"}},{"id":"connection:String-class-method","html_id":"connection:String-class-method","name":"connection","doc":"Define on which connection the model is living. Useful in case of models living in different databases.\n\nIs set to \"default\" by default.\n\nSee `Clear::SQL#init(URI, *opts)` for more information about multi-connections.\n\nExample:\n```\n Clear::SQL.init(\"postgres://postgres@localhost/database_1\", connection_pool_size: 5)\n Clear::SQL.init(\"secondary\", \"postgres://postgres@localhost/database_2\", connection_pool_size: 5)\n\nclass ModelA\n  include Clear::Model\n\n  # Performs all the queries on `database_1`\n  # self.connection = \"default\"\n  column id : Int32, primary: true, presence: false\n  column title : String\nend\n\nclass ModelB\n  include Clear::Model\n\n  # Performs all the queries on `database_2`\n  self.connection = \"secondary\"\n\n  column id : Int32, primary: true, presence: false\nend\n\n```","summary":"<p>Define on which connection the model is living.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"connection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@connection"}},{"id":"connection=(connection:String)-class-method","html_id":"connection=(connection:String)-class-method","name":"connection=","doc":"Define on which connection the model is living. Useful in case of models living in different databases.\n\nIs set to \"default\" by default.\n\nSee `Clear::SQL#init(URI, *opts)` for more information about multi-connections.\n\nExample:\n```\n Clear::SQL.init(\"postgres://postgres@localhost/database_1\", connection_pool_size: 5)\n Clear::SQL.init(\"secondary\", \"postgres://postgres@localhost/database_2\", connection_pool_size: 5)\n\nclass ModelA\n  include Clear::Model\n\n  # Performs all the queries on `database_1`\n  # self.connection = \"default\"\n  column id : Int32, primary: true, presence: false\n  column title : String\nend\n\nclass ModelB\n  include Clear::Model\n\n  # Performs all the queries on `database_2`\n  self.connection = \"secondary\"\n\n  column id : Int32, primary: true, presence: false\nend\n\n```","summary":"<p>Define on which connection the model is living.</p>","abstract":false,"args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"String"}],"args_string":"(connection : String)","args_html":"(connection : String)","location":null,"def":{"name":"connection=","args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@connection = connection"}},{"id":"create(x:Array(NamedTuple)):Array(self)-class-method","html_id":"create(x:Array(NamedTuple)):Array(self)-class-method","name":"create","doc":"Multi-models creation. See `Collection#create(**args)`\n\nReturns the list of newly created model.\n\nEach model will call an `INSERT` query.\nYou may want to use `Collection#import` to insert multiple model more efficiently in one query.","summary":"<p>Multi-models creation.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Array(NamedTuple)"}],"args_string":"(x : Array(NamedTuple)) : Array(<span class=\"k\">self</span>)","args_html":"(x : Array(NamedTuple)) : Array(<span class=\"k\">self</span>)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Array(NamedTuple)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"x.map do |elm|\n  create(**elm)\nend"}},{"id":"create!(x:Array(NamedTuple)):Array(self)-class-method","html_id":"create!(x:Array(NamedTuple)):Array(self)-class-method","name":"create!","doc":"Multi-models creation. See `Collection#create!(**args)`\n\nReturns the list of newly created model.\nRaises exception if any of the model has validation error.","summary":"<p>Multi-models creation.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Array(NamedTuple)"}],"args_string":"(x : Array(NamedTuple)) : Array(<span class=\"k\">self</span>)","args_html":"(x : Array(NamedTuple)) : Array(<span class=\"k\">self</span>)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create!","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Array(NamedTuple)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"x.map do |elm|\n  create!(**elm)\nend"}},{"id":"create_from_json(string_or_io:String|IO,trusted:Bool=false)-class-method","html_id":"create_from_json(string_or_io:String|IO,trusted:Bool=false)-class-method","name":"create_from_json","doc":"Create a new model from json and save it. Returns the model.\n\nThe model may not be saved due to validation failure;\ncheck the returned model `errors?` and `persisted?` flags.\nTrusted flag set to true will allow mass assignment without protection, FALSE by default","summary":"<p>Create a new model from json and save it.</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"create_from_json","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"mdl = self.from_json(string_or_io, trusted)\nmdl.save\nmdl\n"}},{"id":"create_from_json!(string_or_io:String|IO,trusted:Bool=false)-class-method","html_id":"create_from_json!(string_or_io:String|IO,trusted:Bool=false)-class-method","name":"create_from_json!","doc":"Create a new model from json and save it. Returns the model.\n\nReturns the newly inserted model\nRaises an exception if validation failed during the saving process.\nTrusted flag set to true will allow mass assignment without protection, FALSE by default","summary":"<p>Create a new model from json and save it.</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"create_from_json!","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.from_json(string_or_io, trusted)).save!"}},{"id":"find(x)-class-method","html_id":"find(x)-class-method","name":"find","doc":"Returns a model using primary key equality\nReturns `nil` if not found.","summary":"<p>Returns a model using primary key equality Returns <code>nil</code> if not found.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"find","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.find(x)"}},{"id":"find!(x)-class-method","html_id":"find!(x)-class-method","name":"find!","doc":"Returns a model using primary key equality.\nRaises error if the model is not found.","summary":"<p>Returns a model using primary key equality.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"find!","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.find!(x)"}},{"id":"from_json(string_or_io:String|IO,trusted:Bool=false)-class-method","html_id":"from_json(string_or_io:String|IO,trusted:Bool=false)-class-method","name":"from_json","doc":"Create a new empty model and fill the columns from json. Returns the new model\n\nTrusted flag set to true will allow mass assignment without protection, FALSE by default","summary":"<p>Create a new empty model and fill the columns from json.</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"from_json","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(Assigner.from_json(string_or_io)).create(trusted)"}},{"id":"full_table_name-class-method","html_id":"full_table_name-class-method","name":"full_table_name","doc":"returns the fully qualified and escaped name for this table.\nadd schema if schema is different from 'public' (default schema)\n\nex: \"schema\".\"table\"","summary":"<p>returns the fully qualified and escaped name for this table.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"full_table_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (s = schema) != \"public\"\n  {schema, table}.map do |x|\n    Clear::SQL.escape(x.to_s)\n  end.join(\".\")\nelse\n  Clear::SQL.escape(table)\nend"}},{"id":"import(array:Enumerable(self),on_conflict:Clear::SQL::InsertQuery->?=nil)-class-method","html_id":"import(array:Enumerable(self),on_conflict:Clear::SQL::InsertQuery->?=nil)-class-method","name":"import","doc":"Import a bulk of models in one SQL insert query.\nEach model must be non-persisted.\n\n`on_conflict` callback can be optionnaly turned on\nto manage constraints of the database.\n\nNote: Old models are not modified. This method return a copy of the\nmodels as saved in the database.\n\n## Example:\n```crystal\n\n users = [ User.new(id: 1), User.new(id: 2), User.new(id: 3)]\n users = User.import(users)\n```","summary":"<p>Import a bulk of models in one SQL insert query.</p>","abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":"Enumerable(self)"},{"name":"on_conflict","doc":null,"default_value":"nil","external_name":"on_conflict","restriction":"(Clear::SQL::InsertQuery -> ) | ::Nil"}],"args_string":"(array : Enumerable(<span class=\"k\">self</span>), on_conflict : Clear::SQL::InsertQuery -> ? = <span class=\"n\">nil</span>)","args_html":"(array : Enumerable(<span class=\"k\">self</span>), on_conflict : Clear::SQL::InsertQuery -> ? = <span class=\"n\">nil</span>)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"import","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":"Enumerable(self)"},{"name":"on_conflict","doc":null,"default_value":"nil","external_name":"on_conflict","restriction":"(Clear::SQL::InsertQuery -> ) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"array.each do |item|\n  if item.persisted?\n    raise(\"One of your model is persisted while calling import\")\n  end\nend\nhashes = array.map do |item|\n  item.trigger_before_events(:save)\n  if item.valid?\n  else\n    raise(\"import: Validation failed for `#{item}`\")\n  end\n  item.trigger_before_events(:create)\n  item.to_h\nend\nquery = (Clear::SQL.insert_into(self.table, hashes)).returning(\"*\")\nif on_conflict\n  on_conflict.call(query)\nend\no = [] of self\nquery.fetch(@@connection) do |hash|\n  o << ((Clear::Model::Factory.build(self.name, hash, persisted: true, fetch_columns: false, cache: nil)).as(self))\nend\no.each(&.trigger_after_events(:create))\no.each(&.trigger_after_events(:save))\no\n"}},{"id":"polymorphic?:Bool-class-method","html_id":"polymorphic?:Bool-class-method","name":"polymorphic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":null,"def":{"name":"polymorphic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@@polymorphic"}},{"id":"query-class-method","html_id":"query-class-method","name":"query","doc":"Return a new empty query `SELECT * FROM [my_model_table]`. Can be refined after that.","summary":"<p>Return a new empty query <code>SELECT * FROM [my_model_table]</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"query","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(Collection.new.use_connection(connection)).from(self.full_table_name)"}},{"id":"read_only=(read_only:Bool)-class-method","html_id":"read_only=(read_only:Bool)-class-method","name":"read_only=","doc":null,"summary":null,"abstract":false,"args":[{"name":"read_only","doc":null,"default_value":"","external_name":"read_only","restriction":"Bool"}],"args_string":"(read_only : Bool)","args_html":"(read_only : Bool)","location":null,"def":{"name":"read_only=","args":[{"name":"read_only","doc":null,"default_value":"","external_name":"read_only","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@read_only = read_only"}},{"id":"read_only?:Bool-class-method","html_id":"read_only?:Bool-class-method","name":"read_only?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":null,"def":{"name":"read_only?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@@read_only"}},{"id":"schema:Clear::SQL::Symbolic?-class-method","html_id":"schema:Clear::SQL::Symbolic?-class-method","name":"schema","doc":"Define the current schema used in PostgreSQL. The value is `nil` by default, which lead to non-specified\n  schema during the querying, and usage of \"public\" by PostgreSQL.\n\nThis property can be redefined on initialization. Example:\n\n```\n  class MyModel\n    include Clear::Model\n\n    self.schema = \"my_schema\"\n  end\n  MyModel.query.to_sql # SELECT * FROM \"my_schema\".\"my_models\"\n```","summary":"<p>Define the current schema used in PostgreSQL.</p>","abstract":false,"args":[],"args_string":" : Clear::SQL::Symbolic?","args_html":" : Clear::SQL::Symbolic?","location":null,"def":{"name":"schema","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::SQL::Symbolic | ::Nil","visibility":"Public","body":"@@schema"}},{"id":"schema=(schema:Clear::SQL::Symbolic?)-class-method","html_id":"schema=(schema:Clear::SQL::Symbolic?)-class-method","name":"schema=","doc":"Define the current schema used in PostgreSQL. The value is `nil` by default, which lead to non-specified\n  schema during the querying, and usage of \"public\" by PostgreSQL.\n\nThis property can be redefined on initialization. Example:\n\n```\n  class MyModel\n    include Clear::Model\n\n    self.schema = \"my_schema\"\n  end\n  MyModel.query.to_sql # SELECT * FROM \"my_schema\".\"my_models\"\n```","summary":"<p>Define the current schema used in PostgreSQL.</p>","abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":"Clear::SQL::Symbolic | ::Nil"}],"args_string":"(schema : Clear::SQL::Symbolic?)","args_html":"(schema : Clear::SQL::Symbolic?)","location":null,"def":{"name":"schema=","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":"Clear::SQL::Symbolic | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@schema = schema"}},{"id":"table:Clear::SQL::Symbolic-class-method","html_id":"table:Clear::SQL::Symbolic-class-method","name":"table","doc":"Return the table name setup for this model.\nBy convention, the class name is by default equals to the pluralized underscored string form of the model name.\nExample:\n\n```\n  MyModel => \"my_models\"\n  Person => \"people\"\n  Project::Info => \"project_infos\"\n```\n\nThe property can be updated at initialization to a custom table name:\n\n```\n  class MyModel\n    include Clear::Model\n\n    self.table = \"another_table_name\"\n  end\n  MyModel.query.to_sql # SELECT * FROM \"another_table_name\"\n```","summary":"<p>Return the table name setup for this model.</p>","abstract":false,"args":[],"args_string":" : Clear::SQL::Symbolic","args_html":" : Clear::SQL::Symbolic","location":null,"def":{"name":"table","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::SQL::Symbolic","visibility":"Public","body":"@@table"}},{"id":"table=(table:Clear::SQL::Symbolic)-class-method","html_id":"table=(table:Clear::SQL::Symbolic)-class-method","name":"table=","doc":"Return the table name setup for this model.\nBy convention, the class name is by default equals to the pluralized underscored string form of the model name.\nExample:\n\n```\n  MyModel => \"my_models\"\n  Person => \"people\"\n  Project::Info => \"project_infos\"\n```\n\nThe property can be updated at initialization to a custom table name:\n\n```\n  class MyModel\n    include Clear::Model\n\n    self.table = \"another_table_name\"\n  end\n  MyModel.query.to_sql # SELECT * FROM \"another_table_name\"\n```","summary":"<p>Return the table name setup for this model.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"Clear::SQL::Symbolic"}],"args_string":"(table : Clear::SQL::Symbolic)","args_html":"(table : Clear::SQL::Symbolic)","location":null,"def":{"name":"table=","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"Clear::SQL::Symbolic"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@table = table"}}],"constructors":[{"id":"create(**args):self-class-method","html_id":"create(**args):self-class-method","name":"create","doc":"Build and new model and save it. Returns the model.\n\nThe model may not be saved due to validation failure;\ncheck the returned model `errors?` and `persisted?` flags.","summary":"<p>Build and new model and save it.</p>","abstract":false,"args":[],"args_string":"(**args) : <span class=\"k\">self</span>","args_html":"(**args) : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mdl = build(**args)\nmdl.save\nmdl\n"}},{"id":"create(x:NamedTuple):self-class-method","html_id":"create(x:NamedTuple):self-class-method","name":"create","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NamedTuple"}],"args_string":"(x : NamedTuple) : <span class=\"k\">self</span>","args_html":"(x : NamedTuple) : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mdl = build(**x)\nmdl.save\nmdl\n"}},{"id":"create(x:Hash):self-class-method","html_id":"create(x:Hash):self-class-method","name":"create","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Hash"}],"args_string":"(x : Hash) : <span class=\"k\">self</span>","args_html":"(x : Hash) : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mdl = self.new(a)\nmdl.save\nmdl\n"}},{"id":"create!(**args):self-class-method","html_id":"create!(**args):self-class-method","name":"create!","doc":"Build and new model and save it. Returns the model.\n\nReturns the newly inserted model\nRaises an exception if validation failed during the saving process.","summary":"<p>Build and new model and save it.</p>","abstract":false,"args":[],"args_string":"(**args) : <span class=\"k\">self</span>","args_html":"(**args) : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create!","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mdl = build(**args)\nmdl.save!\nmdl\n"}},{"id":"create!(x:NamedTuple):self-class-method","html_id":"create!(x:NamedTuple):self-class-method","name":"create!","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NamedTuple"}],"args_string":"(x : NamedTuple) : <span class=\"k\">self</span>","args_html":"(x : NamedTuple) : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create!","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mdl = build(**x)\nmdl.save!\nmdl\n"}},{"id":"create!(a:Hash):self-class-method","html_id":"create!(a:Hash):self-class-method","name":"create!","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Hash"}],"args_string":"(a : Hash) : <span class=\"k\">self</span>","args_html":"(a : Hash) : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"create!","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mdl = self.new(a)\nmdl.save!\nmdl\n"}},{"id":"new(h:Hash(String,_),cache:Clear::Model::QueryCache?=nil,persisted=false,fetch_columns=false)-class-method","html_id":"new(h:Hash(String,_),cache:Clear::Model::QueryCache?=nil,persisted=false,fetch_columns=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(String, _)"},{"name":"cache","doc":null,"default_value":"nil","external_name":"cache","restriction":"Clear::Model::QueryCache | ::Nil"},{"name":"persisted","doc":null,"default_value":"false","external_name":"persisted","restriction":""},{"name":"fetch_columns","doc":null,"default_value":"false","external_name":"fetch_columns","restriction":""}],"args_string":"(h : Hash(String, _), cache : Clear::Model::QueryCache? = <span class=\"n\">nil</span>, persisted = <span class=\"n\">false</span>, fetch_columns = <span class=\"n\">false</span>)","args_html":"(h : Hash(String, _), cache : Clear::Model::QueryCache? = <span class=\"n\">nil</span>, persisted = <span class=\"n\">false</span>, fetch_columns = <span class=\"n\">false</span>)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(String, _)"},{"name":"cache","doc":null,"default_value":"nil","external_name":"cache","restriction":"Clear::Model::QueryCache | ::Nil"},{"name":"persisted","doc":null,"default_value":"false","external_name":"persisted","restriction":""},{"name":"fetch_columns","doc":null,"default_value":"false","external_name":"fetch_columns","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(h, cache, persisted, fetch_columns)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(json:JSON::Any,cache:Clear::Model::QueryCache?=nil,persisted=false)-class-method","html_id":"new(json:JSON::Any,cache:Clear::Model::QueryCache?=nil,persisted=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Any"},{"name":"cache","doc":null,"default_value":"nil","external_name":"cache","restriction":"Clear::Model::QueryCache | ::Nil"},{"name":"persisted","doc":null,"default_value":"false","external_name":"persisted","restriction":""}],"args_string":"(json : JSON::Any, cache : Clear::Model::QueryCache? = <span class=\"n\">nil</span>, persisted = <span class=\"n\">false</span>)","args_html":"(json : JSON::Any, cache : Clear::Model::QueryCache? = <span class=\"n\">nil</span>, persisted = <span class=\"n\">false</span>)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Any"},{"name":"cache","doc":null,"default_value":"nil","external_name":"cache","restriction":"Clear::Model::QueryCache | ::Nil"},{"name":"persisted","doc":null,"default_value":"false","external_name":"persisted","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(json, cache, persisted)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(t:NamedTuple,persisted=false)-class-method","html_id":"new(t:NamedTuple,persisted=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"NamedTuple"},{"name":"persisted","doc":null,"default_value":"false","external_name":"persisted","restriction":""}],"args_string":"(t : NamedTuple, persisted = <span class=\"n\">false</span>)","args_html":"(t : NamedTuple, persisted = <span class=\"n\">false</span>)","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"NamedTuple"},{"name":"persisted","doc":null,"default_value":"false","external_name":"persisted","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(t, persisted)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"attributes:Hash(String,Clear::SQL::Any)-instance-method","html_id":"attributes:Hash(String,Clear::SQL::Any)-instance-method","name":"attributes","doc":"Attributes, used when fetch_columns is true","summary":"<p>Attributes, used when fetch_columns is true</p>","abstract":false,"args":[],"args_string":" : Hash(String, Clear::SQL::Any)","args_html":" : Hash(String, Clear::SQL::Any)","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, ::Clear::SQL::Any)","visibility":"Public","body":"@attributes"}},{"id":"cache:Clear::Model::QueryCache?-instance-method","html_id":"cache:Clear::Model::QueryCache?-instance-method","name":"cache","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Clear::Model::QueryCache?","args_html":" : Clear::Model::QueryCache?","location":null,"def":{"name":"cache","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::Model::QueryCache | ::Nil","visibility":"Public","body":"@cache"}},{"id":"changed?-instance-method","html_id":"changed?-instance-method","name":"changed?","doc":"Return `true` if the model is dirty (e.g. one or more fields\n  have been changed.). Return `false` otherwise.","summary":"<p>Return <code>true</code> if the model is dirty (e.g.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @name_column.changed?\n  return true\nend\nif @description_column.changed?\n  return true\nend\nif @done_column.changed?\n  return true\nend\nif @id_column.changed?\n  return true\nend\nreturn false\n"}},{"id":"clear_change_flags-instance-method","html_id":"clear_change_flags-instance-method","name":"clear_change_flags","doc":"Reset the `changed?` flag on all columns\n\nThe model behave like its not dirty anymore\nand call to save would apply no changes.\n\nReturns `self`","summary":"<p>Reset the <code><a href=\"Task.html#changed?-instance-method\">#changed?</a></code> flag on all columns</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"clear_change_flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name_column.clear_change_flag\n@description_column.clear_change_flag\n@done_column.clear_change_flag\n@id_column.clear_change_flag\nself\n"}},{"id":"description:String-instance-method","html_id":"description:String-instance-method","name":"description","doc":"Returns the value of `description` column or throw an exception if the column is not defined.","summary":"<p>Returns the value of <code><a href=\"Task.html#description:String-instance-method\">#description</a></code> column or throw an exception if the column is not defined.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@description_column.value"}},{"id":"description=(x:String)-instance-method","html_id":"description=(x:String)-instance-method","name":"description=","doc":"Setter for `description` column.","summary":"<p>Setter for <code><a href=\"Task.html#description:String-instance-method\">#description</a></code> column.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"String"}],"args_string":"(x : String)","args_html":"(x : String)","location":null,"def":{"name":"description=","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description_column.value = x"}},{"id":"description_column:Clear::Model::Column(String,Clear::Model::Converter::StringConverter)-instance-method","html_id":"description_column:Clear::Model::Column(String,Clear::Model::Converter::StringConverter)-instance-method","name":"description_column","doc":"Returns the column object used to manage `description` field\n\nSee `Clear::Model::Column`","summary":"<p>Returns the column object used to manage <code><a href=\"Task.html#description:String-instance-method\">#description</a></code> field</p>","abstract":false,"args":[],"args_string":" : Clear::Model::Column(String, Clear::Model::Converter::StringConverter)","args_html":" : Clear::Model::Column(String, Clear::Model::Converter::StringConverter)","location":null,"def":{"name":"description_column","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::Model::Column(String, Clear::Model::Converter::StringConverter)","visibility":"Public","body":"@description_column"}},{"id":"done:Bool-instance-method","html_id":"done:Bool-instance-method","name":"done","doc":"Returns the value of `done` column or throw an exception if the column is not defined.","summary":"<p>Returns the value of <code><a href=\"Task.html#done:Bool-instance-method\">#done</a></code> column or throw an exception if the column is not defined.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":null,"def":{"name":"done","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@done_column.value"}},{"id":"done=(x:Bool)-instance-method","html_id":"done=(x:Bool)-instance-method","name":"done=","doc":"Setter for `done` column.","summary":"<p>Setter for <code><a href=\"Task.html#done:Bool-instance-method\">#done</a></code> column.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Bool"}],"args_string":"(x : Bool)","args_html":"(x : Bool)","location":null,"def":{"name":"done=","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@done_column.value = x"}},{"id":"done_column:Clear::Model::Column(Bool,Clear::Model::Converter::BoolConverter)-instance-method","html_id":"done_column:Clear::Model::Column(Bool,Clear::Model::Converter::BoolConverter)-instance-method","name":"done_column","doc":"Returns the column object used to manage `done` field\n\nSee `Clear::Model::Column`","summary":"<p>Returns the column object used to manage <code><a href=\"Task.html#done:Bool-instance-method\">#done</a></code> field</p>","abstract":false,"args":[],"args_string":" : Clear::Model::Column(Bool, Clear::Model::Converter::BoolConverter)","args_html":" : Clear::Model::Column(Bool, Clear::Model::Converter::BoolConverter)","location":null,"def":{"name":"done_column","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::Model::Column(Bool, Clear::Model::Converter::BoolConverter)","visibility":"Public","body":"@done_column"}},{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":"Returns the value of `id` column or throw an exception if the column is not defined.","summary":"<p>Returns the value of <code><a href=\"Task.html#id:Int32-instance-method\">#id</a></code> column or throw an exception if the column is not defined.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@id_column.value"}},{"id":"id=(x:Int32)-instance-method","html_id":"id=(x:Int32)-instance-method","name":"id=","doc":"Setter for `id` column.","summary":"<p>Setter for <code><a href=\"Task.html#id:Int32-instance-method\">#id</a></code> column.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Int32"}],"args_string":"(x : Int32)","args_html":"(x : Int32)","location":null,"def":{"name":"id=","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id_column.value = x"}},{"id":"id_column:Clear::Model::Column(Int32,Clear::Model::Converter::Int32Converter)-instance-method","html_id":"id_column:Clear::Model::Column(Int32,Clear::Model::Converter::Int32Converter)-instance-method","name":"id_column","doc":"Returns the column object used to manage `id` field\n\nSee `Clear::Model::Column`","summary":"<p>Returns the column object used to manage <code><a href=\"Task.html#id:Int32-instance-method\">#id</a></code> field</p>","abstract":false,"args":[],"args_string":" : Clear::Model::Column(Int32, Clear::Model::Converter::Int32Converter)","args_html":" : Clear::Model::Column(Int32, Clear::Model::Converter::Int32Converter)","location":null,"def":{"name":"id_column","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::Model::Column(Int32, ::Clear::Model::Converter::Int32Converter)","visibility":"Public","body":"@id_column"}},{"id":"invalidate_caches:self-instance-method","html_id":"invalidate_caches:self-instance-method","name":"invalidate_caches","doc":"Invalidate local-to-relation cache and eager-loading cache.\nUseful to forcefully query again when calling relation defined method","summary":"<p>Invalidate local-to-relation cache and eager-loading cache.</p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/models/task.cr","line_number":5,"url":null},"def":{"name":"invalidate_caches","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@cache = nil\nself\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"Returns the value of `name` column or throw an exception if the column is not defined.","summary":"<p>Returns the value of <code><a href=\"Task.html#name:String-instance-method\">#name</a></code> column or throw an exception if the column is not defined.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name_column.value"}},{"id":"name=(x:String)-instance-method","html_id":"name=(x:String)-instance-method","name":"name=","doc":"Setter for `name` column.","summary":"<p>Setter for <code><a href=\"Task.html#name:String-instance-method\">#name</a></code> column.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"String"}],"args_string":"(x : String)","args_html":"(x : String)","location":null,"def":{"name":"name=","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name_column.value = x"}},{"id":"name_column:Clear::Model::Column(String,Clear::Model::Converter::StringConverter)-instance-method","html_id":"name_column:Clear::Model::Column(String,Clear::Model::Converter::StringConverter)-instance-method","name":"name_column","doc":"Returns the column object used to manage `name` field\n\nSee `Clear::Model::Column`","summary":"<p>Returns the column object used to manage <code><a href=\"Task.html#name:String-instance-method\">#name</a></code> field</p>","abstract":false,"args":[],"args_string":" : Clear::Model::Column(String, Clear::Model::Converter::StringConverter)","args_html":" : Clear::Model::Column(String, Clear::Model::Converter::StringConverter)","location":null,"def":{"name":"name_column","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Clear::Model::Column(String, Clear::Model::Converter::StringConverter)","visibility":"Public","body":"@name_column"}},{"id":"reset(**t:**T)forallT-instance-method","html_id":"reset(**t:**T)forallT-instance-method","name":"reset","doc":"reset flavors","summary":"<p>reset flavors</p>","abstract":false,"args":[],"args_string":"(**t : **T) forall T","args_html":"(**t : **T) forall T","location":null,"def":{"name":"reset","args":[],"double_splat":{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()\n{% for name, typ in T %}\n\n          {% if settings = COLUMNS[\"#{name}\"] %}\n            @{{ settings[:crystal_variable_name] }}_column.reset_convert(t[:{{ name }}])\n          {% else %}\n            {% if !(@type.has_method?(\"#{name}=\")) %}\n              {% raise(\"Cannot find the column `#{name}` of the model `#{@type}`\") %}\n            {% end %}\n            self.{{ name }} = t[:{{ name }}]\n          {% end %}\n        {% end %}\nself\n"}},{"id":"reset(from_json:JSON::Any)-instance-method","html_id":"reset(from_json:JSON::Any)-instance-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[{"name":"from_json","doc":null,"default_value":"","external_name":"from_json","restriction":"JSON::Any"}],"args_string":"(from_json : JSON::Any)","args_html":"(from_json : JSON::Any)","location":null,"def":{"name":"reset","args":[{"name":"from_json","doc":null,"default_value":"","external_name":"from_json","restriction":"JSON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reset(from_json.as_h)"}},{"id":"reset(t:NamedTuple)-instance-method","html_id":"reset(t:NamedTuple)-instance-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"NamedTuple"}],"args_string":"(t : NamedTuple)","args_html":"(t : NamedTuple)","location":null,"def":{"name":"reset","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reset(**t)"}},{"id":"reset(h:Hash(String,_))-instance-method","html_id":"reset(h:Hash(String,_))-instance-method","name":"reset","doc":"Set the model fields from hash","summary":"<p>Set the model fields from hash</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(String, _)"}],"args_string":"(h : Hash(String, _))","args_html":"(h : Hash(String, _))","location":null,"def":{"name":"reset","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(String, _)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(h)\n{% for name, settings in COLUMNS %}\n          v = h.fetch({{ settings[:db_column_name] }}){ Column::UNKNOWN }\n          @{{ settings[:crystal_variable_name] }}_column.reset_convert(v) unless v.is_a?(Column::UnknownClass)\n        {% end %}\nself\n"}},{"id":"reset(h:Hash(Symbol,_))-instance-method","html_id":"reset(h:Hash(Symbol,_))-instance-method","name":"reset","doc":"Set the columns from hash","summary":"<p>Set the columns from hash</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(Symbol, _)"}],"args_string":"(h : Hash(Symbol, _))","args_html":"(h : Hash(Symbol, _))","location":null,"def":{"name":"reset","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(Symbol, _)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(h)\n{% for name, settings in COLUMNS %}\n          v = h.fetch(:\\{{settings[:db_column_name]}}){ Column::UNKNOWN }\n          @{{ settings[:crystal_variable_name] }}_column.reset_convert(v) unless v.is_a?(Column::UnknownClass)\n        {% end %}\nself\n"}},{"id":"set(h:Hash(Symbol,_))-instance-method","html_id":"set(h:Hash(Symbol,_))-instance-method","name":"set","doc":"Set the columns from hash","summary":"<p>Set the columns from hash</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(Symbol, _)"}],"args_string":"(h : Hash(Symbol, _))","args_html":"(h : Hash(Symbol, _))","location":null,"def":{"name":"set","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(Symbol, _)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(h)\n{% for name, settings in COLUMNS %}\n          v = h.fetch(:{{ settings[:db_column_name] }}){ Column::UNKNOWN }\n          @{{ settings[:crystal_variable_name] }}_column.set_convert(v) unless v.is_a?(Column::UnknownClass)\n        {% end %}\nself\n"}},{"id":"set(h:Hash(String,_))-instance-method","html_id":"set(h:Hash(String,_))-instance-method","name":"set","doc":"Set the model fields from hash","summary":"<p>Set the model fields from hash</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(String, _)"}],"args_string":"(h : Hash(String, _))","args_html":"(h : Hash(String, _))","location":null,"def":{"name":"set","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash(String, _)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(h)\n{% for name, settings in COLUMNS %}\n          v = h.fetch({{ settings[:db_column_name] }}){ Column::UNKNOWN }\n          @{{ settings[:crystal_variable_name] }}_column.set_convert(v) unless v.is_a?(Column::UnknownClass)\n        {% end %}\nself\n"}},{"id":"set(t:NamedTuple)-instance-method","html_id":"set(t:NamedTuple)-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"NamedTuple"}],"args_string":"(t : NamedTuple)","args_html":"(t : NamedTuple)","location":null,"def":{"name":"set","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(**t)"}},{"id":"set(from_json:JSON::Any)-instance-method","html_id":"set(from_json:JSON::Any)-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"from_json","doc":null,"default_value":"","external_name":"from_json","restriction":"JSON::Any"}],"args_string":"(from_json : JSON::Any)","args_html":"(from_json : JSON::Any)","location":null,"def":{"name":"set","args":[{"name":"from_json","doc":null,"default_value":"","external_name":"from_json","restriction":"JSON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(from_json.as_h)"}},{"id":"set(**t:**T)forallT-instance-method","html_id":"set(**t:**T)forallT-instance-method","name":"set","doc":"Set one or multiple columns to a specific value\nThis two are equivalents:\n\n```\nmodel.set(a: 1)\nmodel.a = 1\n```","summary":"<p>Set one or multiple columns to a specific value This two are equivalents:</p>","abstract":false,"args":[],"args_string":"(**t : **T) forall T","args_html":"(**t : **T) forall T","location":null,"def":{"name":"set","args":[],"double_splat":{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()\n{% for name, typ in T %}\n          {% if settings = COLUMNS[\"#{name}\".id] %}\n            @{{ settings[:crystal_variable_name] }}_column.set_convert(t[:{{ name }}])\n          {% else %}\n            {% if !(@type.has_method?(\"#{name}=\")) %}\n              {% raise(\"No method #{@type}##{name}= while trying to set value of #{name}\") %}\n            {% end %}\n            self.{{ name }} = t[:{{ name }}]\n          {% end %}\n        {% end %}\nself\n"}},{"id":"set_from_json(string_or_io:String|IO,trusted:Bool=false)-instance-method","html_id":"set_from_json(string_or_io:String|IO,trusted:Bool=false)-instance-method","name":"set_from_json","doc":"Set the fields from json passed as argument\nTrusted flag set to true will allow mass assignment without protection, FALSE by default","summary":"<p>Set the fields from json passed as argument Trusted flag set to true will allow mass assignment without protection, FALSE by default</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"set_from_json","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(Assigner.from_json(string_or_io)).update(self, trusted)"}},{"id":"to_h(full=false):Hash(String,Clear::SQL::Any)-instance-method","html_id":"to_h(full=false):Hash(String,Clear::SQL::Any)-instance-method","name":"to_h","doc":"Return a hash version of the columns of this model.","summary":"<p>Return a hash version of the columns of this model.</p>","abstract":false,"args":[{"name":"full","doc":null,"default_value":"false","external_name":"full","restriction":""}],"args_string":"(full = <span class=\"n\">false</span>) : Hash(String, Clear::SQL::Any)","args_html":"(full = <span class=\"n\">false</span>) : Hash(String, Clear::SQL::Any)","location":null,"def":{"name":"to_h","args":[{"name":"full","doc":null,"default_value":"false","external_name":"full","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, ::Clear::SQL::Any)","visibility":"Public","body":"out = super(full)\nif full || @name_column.defined?\n  out[\"name\"] = @name_column.to_sql_value(nil)\nend\nif full || @description_column.defined?\n  out[\"description\"] = @description_column.to_sql_value(nil)\nend\nif full || @done_column.defined?\n  out[\"done\"] = @done_column.to_sql_value(nil)\nend\nif full || @id_column.defined?\n  out[\"id\"] = @id_column.to_sql_value(nil)\nend\nout\n"}},{"id":"to_json(emit_nulls:Bool=false)-instance-method","html_id":"to_json(emit_nulls:Bool=false)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"emit_nulls","doc":null,"default_value":"false","external_name":"emit_nulls","restriction":"Bool"}],"args_string":"(emit_nulls : Bool = <span class=\"n\">false</span>)","args_html":"(emit_nulls : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"to_json","args":[{"name":"emit_nulls","doc":null,"default_value":"false","external_name":"emit_nulls","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"JSON.build do |json|\n  to_json(json, emit_nulls)\nend"}},{"id":"to_json(json,emit_nulls=false)-instance-method","html_id":"to_json(json,emit_nulls=false)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""},{"name":"emit_nulls","doc":null,"default_value":"false","external_name":"emit_nulls","restriction":""}],"args_string":"(json, emit_nulls = <span class=\"n\">false</span>)","args_html":"(json, emit_nulls = <span class=\"n\">false</span>)","location":null,"def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""},{"name":"emit_nulls","doc":null,"default_value":"false","external_name":"emit_nulls","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"json.object do\n  if emit_nulls || @name_column.defined?\n    json.field(\"name\") do\n      (@name_column.value(nil)).to_json(json)\n    end\n  end\n  if emit_nulls || @description_column.defined?\n    json.field(\"description\") do\n      (@description_column.value(nil)).to_json(json)\n    end\n  end\n  if emit_nulls || @done_column.defined?\n    json.field(\"done\") do\n      (@done_column.value(nil)).to_json(json)\n    end\n  end\n  if emit_nulls || @id_column.defined?\n    json.field(\"id\") do\n      (@id_column.value(nil)).to_json(json)\n    end\n  end\nend"}},{"id":"update_from_json(string_or_io:String|IO,trusted:Bool=false)-instance-method","html_id":"update_from_json(string_or_io:String|IO,trusted:Bool=false)-instance-method","name":"update_from_json","doc":"Set the fields from json passed as argument and call `save` on the object\nTrusted flag set to true will allow mass assignment without protection, FALSE by default","summary":"<p>Set the fields from json passed as argument and call <code>save</code> on the object Trusted flag set to true will allow mass assignment without protection, FALSE by default</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"update_from_json","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"mdl = set_from_json(string_or_io, trusted)\nmdl.save\nmdl\n"}},{"id":"update_from_json!(string_or_io:String|IO,trusted:Bool=false)-instance-method","html_id":"update_from_json!(string_or_io:String|IO,trusted:Bool=false)-instance-method","name":"update_from_json!","doc":"Set the fields from json passed as argument and call `save!` on the object\nTrusted flag set to true will allow mass assignment without protection, FALSE by default","summary":"<p>Set the fields from json passed as argument and call <code>save!</code> on the object Trusted flag set to true will allow mass assignment without protection, FALSE by default</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"update_from_json!","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","doc":null,"default_value":"false","external_name":"trusted","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(set_from_json(string_or_io, trusted)).save!"}},{"id":"update_h:Hash(String,Clear::SQL::Any)-instance-method","html_id":"update_h:Hash(String,Clear::SQL::Any)-instance-method","name":"update_h","doc":"Generate the hash for update request (like during save)","summary":"<p>Generate the hash for update request (like during save)</p>","abstract":false,"args":[],"args_string":" : Hash(String, Clear::SQL::Any)","args_html":" : Hash(String, Clear::SQL::Any)","location":null,"def":{"name":"update_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, ::Clear::SQL::Any)","visibility":"Public","body":"o = super()\nif @name_column.defined? && @name_column.changed?\n  o[\"name\"] = @name_column.to_sql_value\nend\nif @description_column.defined? && @description_column.changed?\n  o[\"description\"] = @description_column.to_sql_value\nend\nif @done_column.defined? && @done_column.changed?\n  o[\"done\"] = @done_column.to_sql_value\nend\nif @id_column.defined? && @id_column.changed?\n  o[\"id\"] = @id_column.to_sql_value\nend\no\n"}},{"id":"validate_fields_presence-instance-method","html_id":"validate_fields_presence-instance-method","name":"validate_fields_presence","doc":"For each column, ensure than when needed the column has present\ninformation into it.\n\nThis method is called on validation.","summary":"<p>For each column, ensure than when needed the column has present information into it.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"validate_fields_presence","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if persisted?\nelse\n  if @name_column.failed_to_be_present?\n    add_error(\"name\", \"must be present\")\n  end\nend\nif persisted?\nelse\n  if @description_column.failed_to_be_present?\n    add_error(\"description\", \"must be present\")\n  end\nend\nif persisted?\nelse\n  if @done_column.failed_to_be_present?\n    add_error(\"done\", \"must be present\")\n  end\nend\nif persisted?\nelse\n  if @id_column.failed_to_be_present?\n    add_error(\"id\", \"must be present\")\n  end\nend\n"}}],"macros":[],"types":[{"html_id":"spider-gazelle/Task/Collection","path":"Task/Collection.html","kind":"class","full_name":"Task::Collection","name":"Collection","abstract":false,"superclass":{"html_id":"spider-gazelle/Clear/Model/CollectionBase","kind":"class","full_name":"Clear::Model::CollectionBase","name":"CollectionBase"},"ancestors":[{"html_id":"spider-gazelle/Clear/Model/CollectionBase","kind":"class","full_name":"Clear::Model::CollectionBase","name":"CollectionBase"},{"html_id":"spider-gazelle/Clear/SQL/SelectBuilder","kind":"module","full_name":"Clear::SQL::SelectBuilder","name":"SelectBuilder"},{"html_id":"spider-gazelle/Clear/SQL/Query/WithPagination","kind":"module","full_name":"Clear::SQL::Query::WithPagination","name":"WithPagination"},{"html_id":"spider-gazelle/Clear/SQL/Query/BeforeQuery","kind":"module","full_name":"Clear::SQL::Query::BeforeQuery","name":"BeforeQuery"},{"html_id":"spider-gazelle/Clear/SQL/Query/Change","kind":"module","full_name":"Clear::SQL::Query::Change","name":"Change"},{"html_id":"spider-gazelle/Clear/SQL/Query/Connection","kind":"module","full_name":"Clear::SQL::Query::Connection","name":"Connection"},{"html_id":"spider-gazelle/Clear/SQL/Query/Pluck","kind":"module","full_name":"Clear::SQL::Query::Pluck","name":"Pluck"},{"html_id":"spider-gazelle/Clear/SQL/Query/Fetch","kind":"module","full_name":"Clear::SQL::Query::Fetch","name":"Fetch"},{"html_id":"spider-gazelle/Clear/SQL/Query/Execute","kind":"module","full_name":"Clear::SQL::Query::Execute","name":"Execute"},{"html_id":"spider-gazelle/Clear/SQL/Query/Lock","kind":"module","full_name":"Clear::SQL::Query::Lock","name":"Lock"},{"html_id":"spider-gazelle/Clear/SQL/Query/Window","kind":"module","full_name":"Clear::SQL::Query::Window","name":"Window"},{"html_id":"spider-gazelle/Clear/SQL/Query/CTE","kind":"module","full_name":"Clear::SQL::Query::CTE","name":"CTE"},{"html_id":"spider-gazelle/Clear/SQL/Query/Aggregate","kind":"module","full_name":"Clear::SQL::Query::Aggregate","name":"Aggregate"},{"html_id":"spider-gazelle/Clear/SQL/Query/OffsetLimit","kind":"module","full_name":"Clear::SQL::Query::OffsetLimit","name":"OffsetLimit"},{"html_id":"spider-gazelle/Clear/SQL/Query/GroupBy","kind":"module","full_name":"Clear::SQL::Query::GroupBy","name":"GroupBy"},{"html_id":"spider-gazelle/Clear/SQL/Query/OrderBy","kind":"module","full_name":"Clear::SQL::Query::OrderBy","name":"OrderBy"},{"html_id":"spider-gazelle/Clear/SQL/Query/Having","kind":"module","full_name":"Clear::SQL::Query::Having","name":"Having"},{"html_id":"spider-gazelle/Clear/SQL/Query/Where","kind":"module","full_name":"Clear::SQL::Query::Where","name":"Where"},{"html_id":"spider-gazelle/Clear/SQL/Query/Join","kind":"module","full_name":"Clear::SQL::Query::Join","name":"Join"},{"html_id":"spider-gazelle/Clear/SQL/Query/From","kind":"module","full_name":"Clear::SQL::Query::From","name":"From"},{"html_id":"spider-gazelle/Clear/SQL/Query/Select","kind":"module","full_name":"Clear::SQL::Query::Select","name":"Select"},{"html_id":"spider-gazelle/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"spider-gazelle/Task","kind":"class","full_name":"Task","name":"Task"},"doc":":doc:\nClear::Model::Collection\n\nThis is the object managing a `SELECT` request.\nA new collection is created by calling `Clear::Model.query`\n\nCollection are mutable and refining the SQL will mutate the collection.\nYou may want to copy the collection by calling `dup`\n\nSee `Clear::Model::CollectionBase`","summary":"<p>:doc: Clear::Model::Collection</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"spider-gazelle/TaskBody","path":"TaskBody.html","kind":"class","full_name":"TaskBody","name":"TaskBody","abstract":false,"superclass":{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"spider-gazelle/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"spider-gazelle/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"https://crystal-lang.org/api/0.36.1/JSON/Serializable.html","summary":"<p>https://crystal-lang.org/api/0.36.1/JSON/Serializable.html</p>","class_methods":[],"constructors":[{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/controllers/serialiser.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"description:String-instance-method","html_id":"description:String-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/controllers/serialiser.cr","line_number":8,"url":null},"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@description"}},{"id":"done:Bool-instance-method","html_id":"done:Bool-instance-method","name":"done","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/controllers/serialiser.cr","line_number":9,"url":null},"def":{"name":"done","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@done"}},{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/controllers/serialiser.cr","line_number":10,"url":null},"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@id"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/controllers/serialiser.cr","line_number":7,"url":null},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}}],"macros":[],"types":[]},{"html_id":"spider-gazelle/TasksController","path":"TasksController.html","kind":"class","full_name":"TasksController","name":"TasksController","abstract":false,"superclass":{"html_id":"spider-gazelle/Application","kind":"class","full_name":"Application","name":"Application"},"ancestors":[{"html_id":"spider-gazelle/Application","kind":"class","full_name":"Application","name":"Application"},{"html_id":"spider-gazelle/ActionController/Base","kind":"class","full_name":"ActionController::Base","name":"Base"},{"html_id":"spider-gazelle/ActionController/Responders","kind":"module","full_name":"ActionController::Responders","name":"Responders"},{"html_id":"spider-gazelle/ActionController/Context","kind":"module","full_name":"ActionController::Context","name":"Context"},{"html_id":"spider-gazelle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"spider-gazelle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"spider-gazelle","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"AFTER","name":"AFTER","value":"{} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"},{"id":"AROUND","name":"AROUND","value":"{} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"},{"id":"BEFORE","name":"BEFORE","value":"{find_task => {[show, update, destroy], nil}, set_request_id => {nil, nil}, set_date_header => {nil, nil}} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"},{"id":"FORCE","name":"FORCE","value":"{} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"},{"id":"LOCAL_AFTER","name":"LOCAL_AFTER","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_AROUND","name":"LOCAL_AROUND","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_BEFORE","name":"LOCAL_BEFORE","value":"{find_task => {[show, update, destroy], nil}} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_FORCE","name":"LOCAL_FORCE","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_RESCUE","name":"LOCAL_RESCUE","value":"{JSON::SerializableError => {json_serializable_error, do |error|\n  render(text: error.message, status: 500)\nend}, NotImplementedError => {not_implemented_error, do |exception|\n  render(text: exception.message, status: 501)\nend}} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_ROUTES","name":"LOCAL_ROUTES","value":"{options_ => {\"options\", \"/\", do\n  response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n  response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PATCH, DELETE, HEAD, OPTIONS\"\n  response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\nend, false}, options__id => {\"options\", \"/:id\", do\n  response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n  response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PATCH, DELETE, HEAD, OPTIONS\"\n  response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\nend, false}} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"LOCAL_SKIP","name":"LOCAL_SKIP","value":"{} of Nil => Nil","doc":"function => options","summary":"<p>function => options</p>"},{"id":"Log","name":"Log","value":"::Log.for(\"controller\")","doc":null,"summary":null},{"id":"NAMESPACE","name":"NAMESPACE","value":"[\"/tasks\"]","doc":"default namespace based on class","summary":"<p>default namespace based on class</p>"},{"id":"RESCUE","name":"RESCUE","value":"{JSON::SerializableError => {json_serializable_error, do |error|\n  render(text: error.message, status: 500)\nend}, NotImplementedError => {not_implemented_error, do |exception|\n  render(text: exception.message, status: 501)\nend}} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"},{"id":"ROUTES","name":"ROUTES","value":"{options_ => {\"options\", \"/\", do\n  response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n  response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PATCH, DELETE, HEAD, OPTIONS\"\n  response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\nend, false}, options__id => {\"options\", \"/:id\", do\n  response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n  response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PATCH, DELETE, HEAD, OPTIONS\"\n  response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\nend, false}, index => {\"get\", \"/\", nil, false}, show => {\"get\", \"/:id\", nil, false}, create => {\"post\", \"/\", nil, false}, update => {\"patch\", \"/:id\", nil, false}, destroy => {\"delete\", \"/:id\", nil, false}} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"},{"id":"SKIP","name":"SKIP","value":"{} of Nil => Nil","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>","class_methods":[{"id":"__init_routes__(router)-class-method","html_id":"__init_routes__(router)-class-method","name":"__init_routes__","doc":"Routes call the functions generated above","summary":"<p>Routes call the functions generated above</p>","abstract":false,"args":[{"name":"router","doc":null,"default_value":"","external_name":"router","restriction":""}],"args_string":"(router)","args_html":"(router)","location":null,"def":{"name":"__init_routes__","args":[{"name":"router","doc":null,"default_value":"","external_name":"router","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"router.options(\"/tasks/\", &->options__tasks_(HTTP::Server::Context, Bool))\nrouter.options(\"/tasks/:id\", &->options__tasks__id(HTTP::Server::Context, Bool))\nrouter.get(\"/tasks/\", &->get__tasks_(HTTP::Server::Context, Bool))\nrouter.get(\"/tasks/:id\", &->get__tasks__id(HTTP::Server::Context, Bool))\nrouter.post(\"/tasks/\", &->post__tasks_(HTTP::Server::Context, Bool))\nrouter.patch(\"/tasks/:id\", &->patch__tasks__id(HTTP::Server::Context, Bool))\nrouter.delete(\"/tasks/:id\", &->delete__tasks__id(HTTP::Server::Context, Bool))\nnil\n"}},{"id":"__route_list__-class-method","html_id":"__route_list__-class-method","name":"__route_list__","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"__route_list__","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"[{\"TasksController\", :options_, :options, \"/tasks/\".gsub(\"//\", \"/\")}, {\"TasksController\", :options__id, :options, \"/tasks/:id\".gsub(\"//\", \"/\")}, {\"TasksController\", :index, :get, \"/tasks/\".gsub(\"//\", \"/\")}, {\"TasksController\", :show, :get, \"/tasks/:id\".gsub(\"//\", \"/\")}, {\"TasksController\", :create, :post, \"/tasks/\".gsub(\"//\", \"/\")}, {\"TasksController\", :update, :patch, \"/tasks/:id\".gsub(\"//\", \"/\")}, {\"TasksController\", :destroy, :delete, \"/tasks/:id\".gsub(\"//\", \"/\")}]"}},{"id":"base_route-class-method","html_id":"base_route-class-method","name":"base_route","doc":"Helper for obtaining base route","summary":"<p>Helper for obtaining base route</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"base_route","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@base_route"}},{"id":"context(method:String,route:String,route_params:Hash(String,String)?=nil,headers:Hash(String,String)?=nil,body:String|Bytes|IO|Nil=nil,&)-class-method","html_id":"context(method:String,route:String,route_params:Hash(String,String)?=nil,headers:Hash(String,String)?=nil,body:String|Bytes|IO|Nil=nil,&)-class-method","name":"context","doc":"class TasksController < ActionController::Base","summary":"<p>class TasksController &lt; ActionController::Base</p>","abstract":false,"args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"String"},{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":"String"},{"name":"route_params","doc":null,"default_value":"nil","external_name":"route_params","restriction":"Hash(String, String) | ::Nil"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, String) | ::Nil"},{"name":"body","doc":null,"default_value":"nil","external_name":"body","restriction":"String | Bytes | IO | Nil"}],"args_string":"(method : String, route : String, route_params : Hash(String, String)? = <span class=\"n\">nil</span>, headers : Hash(String, String)? = <span class=\"n\">nil</span>, body : String | Bytes | IO | Nil = <span class=\"n\">nil</span>, &)","args_html":"(method : String, route : String, route_params : Hash(String, String)? = <span class=\"n\">nil</span>, headers : Hash(String, String)? = <span class=\"n\">nil</span>, body : String | Bytes | IO | Nil = <span class=\"n\">nil</span>, &)","location":{"filename":"src/controllers/tasks.cr","line_number":12,"url":null},"def":{"name":"context","args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"String"},{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":"String"},{"name":"route_params","doc":null,"default_value":"nil","external_name":"route_params","restriction":"Hash(String, String) | ::Nil"},{"name":"headers","doc":null,"default_value":"nil","external_name":"headers","restriction":"Hash(String, String) | ::Nil"},{"name":"body","doc":null,"default_value":"nil","external_name":"body","restriction":"String | Bytes | IO | Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"ctx = instantiate_context(method, route, route_params, headers, body)\ninstance = self.new(ctx)\nyield instance\nctx.response.output.rewind\nctx.response\n"}},{"id":"create(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"create(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"create","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"create","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}},{"id":"delete__tasks__id(context,head_request)-class-method","html_id":"delete__tasks__id(context,head_request)-class-method","name":"delete__tasks__id","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"delete__tasks__id","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :destroy, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      find_task\n    end\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.destroy\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"destroy(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"destroy(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"destroy","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"destroy","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/:id\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}},{"id":"get__tasks_(context,head_request)-class-method","html_id":"get__tasks_(context,head_request)-class-method","name":"get__tasks_","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"get__tasks_","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :index, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.index\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"get__tasks__id(context,head_request)-class-method","html_id":"get__tasks__id(context,head_request)-class-method","name":"get__tasks__id","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"get__tasks__id","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :show, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      find_task\n    end\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.show\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"index(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"index(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"index","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"index","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}},{"id":"options_(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"options_(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"options_","doc":"Helper methods for performing redirect_to calls","summary":"<p>Helper methods for performing redirect_to calls</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"options_","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}},{"id":"options__id(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"options__id(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"options__id","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"options__id","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/:id\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}},{"id":"options__tasks_(context,head_request)-class-method","html_id":"options__tasks_(context,head_request)-class-method","name":"options__tasks_","doc":"Generate functions for each route","summary":"<p>Generate functions for each route</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"options__tasks_","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :options_, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.options_\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"options__tasks__id(context,head_request)-class-method","html_id":"options__tasks__id(context,head_request)-class-method","name":"options__tasks__id","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"options__tasks__id","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :options__id, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.options__id\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"patch__tasks__id(context,head_request)-class-method","html_id":"patch__tasks__id(context,head_request)-class-method","name":"patch__tasks__id","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"patch__tasks__id","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :update, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      find_task\n    end\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.update\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"post__tasks_(context,head_request)-class-method","html_id":"post__tasks_(context,head_request)-class-method","name":"post__tasks_","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"args_string":"(context, head_request)","args_html":"(context, head_request)","location":null,"def":{"name":"post__tasks_","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"head_request","doc":null,"default_value":"","external_name":"head_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = TasksController.new(context, :create, head_request)\nbegin\n  ActionController::Base.__yield__(instance) do\n    if render_called\n    else\n      set_request_id\n    end\n    if render_called\n    else\n      set_date_header\n    end\n  end\n  if !instance.render_called\n    instance.create\n  end\n  if !instance.render_called\n    session = instance.__session__\n    if session && session.modified\n      session.encode(context.response.cookies)\n    end\n  end\nrescue e : JSON::SerializableError\n  if !instance.render_called\n    instance.json_serializable_error(e)\n  else\n    raise(e)\n  end\nrescue e : NotImplementedError\n  if !instance.render_called\n    instance.not_implemented_error(e)\n  else\n    raise(e)\n  end\nend\ncontext\n"}},{"id":"show(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"show(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"show","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"show","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/:id\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}},{"id":"update(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","html_id":"update(hash_parts:Hash(String|Symbol,Nil|Bool|Int32|Int64|Float32|Float64|String|Symbol)?=nil,**tuple_parts)-class-method","name":"update","doc":"Create draw_routes function\n\nCreate instance of controller class init with context, params and logger\nprotocol checks (https etc)\ncontroller instance created\nbegin exception helpers\ninline the around filters\ninline the before filters\ninline the action\ninline the after filters\nrescue exception handlers","summary":"<p>Create draw_routes function</p>","abstract":false,"args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"args_string":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","args_html":"(hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol)? = <span class=\"n\">nil</span>, **tuple_parts)","location":null,"def":{"name":"update","args":[{"name":"hash_parts","doc":null,"default_value":"nil","external_name":"hash_parts","restriction":"Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | ::Nil"}],"double_splat":{"name":"tuple_parts","doc":null,"default_value":"","external_name":"tuple_parts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"route = \"/tasks/:id\".gsub(\"//\", \"/\")\nActionController::Support.build_route(route, hash_parts, **tuple_parts)\n"}}],"constructors":[],"instance_methods":[{"id":"base_route:String-instance-method","html_id":"base_route:String-instance-method","name":"base_route","doc":"Helper for obtaining base route","summary":"<p>Helper for obtaining base route</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"base_route","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@base_route"}},{"id":"create-instance-method","html_id":"create-instance-method","name":"create","doc":"POST /tasks/","summary":"<p>POST /tasks/</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/tasks.cr","line_number":55,"url":null},"def":{"name":"create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_task = Task.new((request.body.as(IO)).to_json)\nnew_task.save!\nrender(json: new_task)\nif !new_task.save\n  raise(NotImplementedError.new(\"Could not save task\"))\nend\n"}},{"id":"destroy-instance-method","html_id":"destroy-instance-method","name":"destroy","doc":"DELETE /tasks/:id","summary":"<p>DELETE /tasks/:id</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/tasks.cr","line_number":99,"url":null},"def":{"name":"destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"index-instance-method","html_id":"index-instance-method","name":"index","doc":"CRUD methods\nGET /tasks/","summary":"<p>CRUD methods GET /tasks/</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/tasks.cr","line_number":35,"url":null},"def":{"name":"index","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"array_of_tasks = Task.query.select.to_a\nif array_of_tasks.size == 0\n  render(text: \"No records\")\nelse\n  render(json: array_of_tasks.to_json)\nend\n"}},{"id":"json_serializable_error(error)-instance-method","html_id":"json_serializable_error(error)-instance-method","name":"json_serializable_error","doc":"Create functions as required for errors\nSkip the CRUD","summary":"<p>Create functions as required for errors Skip the CRUD</p>","abstract":false,"args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"args_string":"(error)","args_html":"(error)","location":null,"def":{"name":"json_serializable_error","args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"render(text: error.message, status: 500)"}},{"id":"not_implemented_error(exception)-instance-method","html_id":"not_implemented_error(exception)-instance-method","name":"not_implemented_error","doc":"Skip the CRUD","summary":"<p>Skip the CRUD</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception)","args_html":"(exception)","location":null,"def":{"name":"not_implemented_error","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"render(text: exception.message, status: 501)"}},{"id":"options_-instance-method","html_id":"options_-instance-method","name":"options_","doc":"Create functions for named routes\nSkip the CRUD","summary":"<p>Create functions for named routes Skip the CRUD</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"options_","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\nresponse.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PATCH, DELETE, HEAD, OPTIONS\"\nresponse.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\n"}},{"id":"options__id-instance-method","html_id":"options__id-instance-method","name":"options__id","doc":"Skip the CRUD","summary":"<p>Skip the CRUD</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"options__id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\nresponse.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PATCH, DELETE, HEAD, OPTIONS\"\nresponse.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\n"}},{"id":"show-instance-method","html_id":"show-instance-method","name":"show","doc":"GET /tasks/:id","summary":"<p>GET /tasks/:id</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/tasks.cr","line_number":45,"url":null},"def":{"name":"show","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if task\n  render(json: task.to_json)\nelse\n  render(text: \"Task can't be found\")\nend"}},{"id":"task-instance-method","html_id":"task-instance-method","name":"task","doc":"Lazy initialization via getter macro - https://crystal-lang.org/api/0.36.1/Object.html#getter(*names,&block)-macro","summary":"<p>Lazy initialization via getter macro - https://crystal-lang.org/api/0.36.1/Object.html#getter(*names,&block)-macro</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/tasks.cr","line_number":17,"url":null},"def":{"name":"task","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @task).nil?\n  @task = (find_task)\nelse\n  value\nend"}},{"id":"update-instance-method","html_id":"update-instance-method","name":"update","doc":"PATCH /tasks/:id","summary":"<p>PATCH /tasks/:id</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/controllers/tasks.cr","line_number":66,"url":null},"def":{"name":"update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"__inherit_after_filters__-macro","html_id":"__inherit_after_filters__-macro","name":"__inherit_after_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_after_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% AFTER_MAPPINGS[@type.name.id] = LOCAL_AFTER %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = AFTER_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !AFTER[name] %}\n                {% AFTER[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_around_filters__-macro","html_id":"__inherit_around_filters__-macro","name":"__inherit_around_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_around_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% AROUND_MAPPINGS[@type.name.id] = LOCAL_AROUND %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = AROUND_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !AROUND[name] %}\n                {% AROUND[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_before_filters__-macro","html_id":"__inherit_before_filters__-macro","name":"__inherit_before_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_before_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% BEFORE_MAPPINGS[@type.name.id] = LOCAL_BEFORE %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = BEFORE_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !BEFORE[name] %}\n                {% BEFORE[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_force_filters__-macro","html_id":"__inherit_force_filters__-macro","name":"__inherit_force_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_force_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% FORCE_MAPPINGS[@type.name.id] = LOCAL_FORCE %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = FORCE_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !FORCE[name] %}\n                {% FORCE[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_rescue_filters__-macro","html_id":"__inherit_rescue_filters__-macro","name":"__inherit_rescue_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_rescue_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% RESCUE_MAPPINGS[@type.name.id] = LOCAL_RESCUE %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = RESCUE_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !RESCUE[name] %}\n                {% RESCUE[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_routes_filters__-macro","html_id":"__inherit_routes_filters__-macro","name":"__inherit_routes_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_routes_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% ROUTES_MAPPINGS[@type.name.id] = LOCAL_ROUTES %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = ROUTES_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !ROUTES[name] %}\n                {% ROUTES[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}},{"id":"__inherit_skip_filters__-macro","html_id":"__inherit_skip_filters__-macro","name":"__inherit_skip_filters__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":null,"def":{"name":"__inherit_skip_filters__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% SKIP_MAPPINGS[@type.name.id] = LOCAL_SKIP %}\n\n        \n{% klasses = [@type.name.id] + @type.ancestors %}\n\n\n        \n# Create a mapping of all field names and types\n\n        \n{% for name in klasses %}\n          {% filters = SKIP_MAPPINGS[name.id] %}\n\n          {% if filters && (!filters.empty?) %}\n            {% for name, options in filters %}\n              {% if !SKIP[name] %}\n                {% SKIP[name] = options %}\n              {% end %}\n            {% end %}\n          {% end %}\n        {% end %}\n\n      \n"}}],"types":[]}]}}